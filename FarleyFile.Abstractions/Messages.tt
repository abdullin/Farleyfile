<#@ template language="C#" #>
<#@ assembly name="$(SolutionDir)\Library\Lokad.CodeDsl.dll" #>
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;

// this is a DSL to define code contract classes without writing them
// Good for starting a project quickly
// pressing Ctrl+S updates CS version immediately
<# var dsl = @"
using ? = ICommand;
using ! = IEvent;


let noteId = NoteId NoteId; 
let storyId = StoryId StoryId;
let taskId = TaskId TaskId;
let date = DateTime Date;
let activity = ActivityId ActivityId;
let id = Identity Id;
let time = DateTimeOffset Time;
PerspectiveCreated! ()

// generic story
StartSimpleStory? (string name)
SimpleStoryStarted! (storyId, string name)

// Done something witReh [john](7) and [jill](78) and
ActivityReference (id, string text, string originalRef)

AddActivity? (string text, time, ICollection<ActivityReference> references)
ActivityAdded! (string text, time, activity, ICollection<ActivityReference> references)


AddNote? (string title, string text, storyId)
NoteAdded! (noteId, string title, string text)
NoteAssignedToStory!  (noteId, storyId, string title, string text)
NoteRemovedFromStory! (noteId, storyId)

RenameItem? (id, string name)
NoteRenamed! (noteId, string oldName, string newName, ICollection<StoryId> storyIds)
TaskRenamed! (taskId, string oldText, string newText, ICollection<StoryId> storyIds)
SimpleStoryRenamed! (storyId, string oldName, string newName)

EditNote? (noteId, string text, string oldText)
NoteEdited! (noteId, string newText, string oldText, ICollection<StoryId> storyIds)
NoteRemoved! (noteId)

MergeNotes? (noteId, NoteId secondary)


AddTask? (string text, storyId)
TaskAdded! (taskId, string text)
TaskAssignedToStory! (taskId, storyId, string text, bool completed)
TaskRemovedFromStory! (taskId, storyId)

AddToStory? (Identity itemId, storyId)
RemoveFromStory? (id, storyId)


// helpers
AddTaskToStory? (taskId, storyId)


CompleteTask? (taskId)
TaskCompleted! (taskId, ICollection<StoryId> storyIds)









";   
var generator = new Lokad.CodeDsl.TemplatedGenerator()
{
    Namespace = "FarleyFile",
    ClassNameTemplate = @"
[DataContract] public sealed class {0}",
    MemberTemplate = "[DataMember(Order = {0})] public {1} {2} {{ get; internal set; }}",
    PrivateCtorTemplate = @"
internal {0} () {{}}"
}; #>
<#= Lokad.CodeDsl.GeneratorUtil.Build(dsl, generator) #>
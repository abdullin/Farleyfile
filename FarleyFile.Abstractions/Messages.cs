using System;


// this is a DSL to define code contract classes without writing them
// Good for starting a project quickly
// pressing Ctrl+S updates CS version immediately
namespace FarleyFile
{
    #region Generated by Lokad Code DSL
    
    public sealed class PerspectiveCreated : IEvent
    {
        public long DraftId { get; internal set; }
        
        internal PerspectiveCreated () {}
        public PerspectiveCreated (long draftId)
        {
            DraftId = draftId;
        }
    }
    
    public sealed class StartStory : ICommand
    {
        public string Name { get; internal set; }
        
        internal StartStory () {}
        public StartStory (string name)
        {
            Name = name;
        }
    }
    
    public sealed class StoryStarted : IEvent
    {
        public long StoryId { get; internal set; }
        public string Name { get; internal set; }
        
        internal StoryStarted () {}
        public StoryStarted (long storyId, string name)
        {
            StoryId = storyId;
            Name = name;
        }
    }
    
    public sealed class AddNote : ICommand
    {
        public string Title { get; internal set; }
        public string Text { get; internal set; }
        
        internal AddNote () {}
        public AddNote (string title, string text)
        {
            Title = title;
            Text = text;
        }
    }
    
    public sealed class NoteAdded : IEvent
    {
        public long NoteId { get; internal set; }
        public string Title { get; internal set; }
        public string Text { get; internal set; }
        
        internal NoteAdded () {}
        public NoteAdded (long noteId, string title, string text)
        {
            NoteId = noteId;
            Title = title;
            Text = text;
        }
    }
    
    public sealed class NoteAssignedToStory : IEvent
    {
        public long NoteId { get; internal set; }
        public long StoryId { get; internal set; }
        public string Title { get; internal set; }
        public string Text { get; internal set; }
        
        internal NoteAssignedToStory () {}
        public NoteAssignedToStory (long noteId, long storyId, string title, string text)
        {
            NoteId = noteId;
            StoryId = storyId;
            Title = title;
            Text = text;
        }
    }
    
    public sealed class AddTask : ICommand
    {
        public string Text { get; internal set; }
        
        internal AddTask () {}
        public AddTask (string text)
        {
            Text = text;
        }
    }
    
    public sealed class TaskAdded : IEvent
    {
        public long TaskId { get; internal set; }
        public string Text { get; internal set; }
        
        internal TaskAdded () {}
        public TaskAdded (long taskId, string text)
        {
            TaskId = taskId;
            Text = text;
        }
    }
    
    public sealed class TaskAssignedToStory : IEvent
    {
        public long TaskId { get; internal set; }
        public long StoryId { get; internal set; }
        public string Text { get; internal set; }
        public bool Completed { get; internal set; }
        
        internal TaskAssignedToStory () {}
        public TaskAssignedToStory (long taskId, long storyId, string text, bool completed)
        {
            TaskId = taskId;
            StoryId = storyId;
            Text = text;
            Completed = completed;
        }
    }
    
    public sealed class AddToStory : ICommand
    {
        public long ItemId { get; internal set; }
        public long StoryId { get; internal set; }
        
        internal AddToStory () {}
        public AddToStory (long itemId, long storyId)
        {
            ItemId = itemId;
            StoryId = storyId;
        }
    }
    
    public sealed class AddTaskToStory : ICommand
    {
        public long TaskId { get; internal set; }
        public long StoryId { get; internal set; }
        
        internal AddTaskToStory () {}
        public AddTaskToStory (long taskId, long storyId)
        {
            TaskId = taskId;
            StoryId = storyId;
        }
    }
    
    public sealed class AddCalendarDay : ICommand
    {
        public DateTime Date { get; internal set; }
        
        internal AddCalendarDay () {}
        public AddCalendarDay (DateTime date)
        {
            Date = date;
        }
    }
    
    public sealed class CalendarDayAdded : IEvent
    {
        public DateTime Date { get; internal set; }
        public long DayId { get; internal set; }
        
        internal CalendarDayAdded () {}
        public CalendarDayAdded (DateTime date, long dayId)
        {
            Date = date;
            DayId = dayId;
        }
    }
    
    public sealed class AddContact : ICommand
    {
        public string Name { get; internal set; }
        
        internal AddContact () {}
        public AddContact (string name)
        {
            Name = name;
        }
    }
    
    public sealed class ContactAdded : IEvent
    {
        public string Name { get; internal set; }
        public long ContactId { get; internal set; }
        
        internal ContactAdded () {}
        public ContactAdded (string name, long contactId)
        {
            Name = name;
            ContactId = contactId;
        }
    }
    
    public sealed class CompleteTask : ICommand
    {
        public long TaskId { get; internal set; }
        
        internal CompleteTask () {}
        public CompleteTask (long taskId)
        {
            TaskId = taskId;
        }
    }
    #endregion
}

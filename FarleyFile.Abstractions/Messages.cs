using System;
using System.Runtime.Serialization;
using System.Collections.Generic;

// this is a DSL to define code contract classes without writing them
// Good for starting a project quickly
// pressing Ctrl+S updates CS version immediately
namespace FarleyFile
{
    #region Generated by Lokad Code DSL
    
    [DataContract] public sealed class PerspectiveCreated : IEvent
    {
    }
    
    [DataContract] public sealed class StartSimpleStory : ICommand
    {
        [DataMember(Order = 1)] public string Name { get; internal set; }
        
        internal StartSimpleStory () {}
        public StartSimpleStory (string name)
        {
            Name = name;
        }
    }
    
    [DataContract] public sealed class SimpleStoryStarted : IEvent
    {
        [DataMember(Order = 1)] public StoryId StoryId { get; internal set; }
        [DataMember(Order = 2)] public string Name { get; internal set; }
        
        internal SimpleStoryStarted () {}
        public SimpleStoryStarted (StoryId storyId, string name)
        {
            StoryId = storyId;
            Name = name;
        }
    }
    
    [DataContract] public sealed class ActivityReference
    {
        [DataMember(Order = 1)] public Identity Id { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        [DataMember(Order = 3)] public string OriginalRef { get; internal set; }
        
        internal ActivityReference () {}
        public ActivityReference (Identity id, string text, string originalRef)
        {
            Id = id;
            Text = text;
            OriginalRef = originalRef;
        }
    }
    
    [DataContract] public sealed class AddActivity : ICommand
    {
        [DataMember(Order = 1)] public string Text { get; internal set; }
        [DataMember(Order = 2)] public DateTimeOffset Time { get; internal set; }
        [DataMember(Order = 3)] public ICollection<ActivityReference> References { get; internal set; }
        
        internal AddActivity () {}
        public AddActivity (string text, DateTimeOffset time, ICollection<ActivityReference> references)
        {
            Text = text;
            Time = time;
            References = references;
        }
    }
    
    [DataContract] public sealed class ActivityAdded : IEvent
    {
        [DataMember(Order = 1)] public string Text { get; internal set; }
        [DataMember(Order = 2)] public DateTimeOffset Time { get; internal set; }
        [DataMember(Order = 3)] public ActivityId ActivityId { get; internal set; }
        [DataMember(Order = 4)] public ICollection<ActivityReference> References { get; internal set; }
        
        internal ActivityAdded () {}
        public ActivityAdded (string text, DateTimeOffset time, ActivityId activityId, ICollection<ActivityReference> references)
        {
            Text = text;
            Time = time;
            ActivityId = activityId;
            References = references;
        }
    }
    
    [DataContract] public sealed class AddNote : ICommand
    {
        [DataMember(Order = 1)] public string Title { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        [DataMember(Order = 3)] public StoryId StoryId { get; internal set; }
        
        internal AddNote () {}
        public AddNote (string title, string text, StoryId storyId)
        {
            Title = title;
            Text = text;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class NoteAdded : IEvent
    {
        [DataMember(Order = 1)] public NoteId NoteId { get; internal set; }
        [DataMember(Order = 2)] public string Title { get; internal set; }
        [DataMember(Order = 3)] public string Text { get; internal set; }
        [DataMember(Order = 4)] public StoryId StoryId { get; internal set; }
        
        internal NoteAdded () {}
        public NoteAdded (NoteId noteId, string title, string text, StoryId storyId)
        {
            NoteId = noteId;
            Title = title;
            Text = text;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class EditNote : ICommand
    {
        [DataMember(Order = 1)] public NoteId NoteId { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        [DataMember(Order = 3)] public string OldText { get; internal set; }
        
        internal EditNote () {}
        public EditNote (NoteId noteId, string text, string oldText)
        {
            NoteId = noteId;
            Text = text;
            OldText = oldText;
        }
    }
    
    [DataContract] public sealed class NoteEdited : IEvent
    {
        [DataMember(Order = 1)] public NoteId NoteId { get; internal set; }
        [DataMember(Order = 2)] public string NewText { get; internal set; }
        [DataMember(Order = 3)] public string OldText { get; internal set; }
        [DataMember(Order = 4)] public StoryId StoryId { get; internal set; }
        
        internal NoteEdited () {}
        public NoteEdited (NoteId noteId, string newText, string oldText, StoryId storyId)
        {
            NoteId = noteId;
            NewText = newText;
            OldText = oldText;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class RenameItem : ICommand
    {
        [DataMember(Order = 1)] public Identity Id { get; internal set; }
        [DataMember(Order = 2)] public string Name { get; internal set; }
        
        internal RenameItem () {}
        public RenameItem (Identity id, string name)
        {
            Id = id;
            Name = name;
        }
    }
    
    [DataContract] public sealed class NoteRenamed : IEvent
    {
        [DataMember(Order = 1)] public NoteId NoteId { get; internal set; }
        [DataMember(Order = 2)] public string OldName { get; internal set; }
        [DataMember(Order = 3)] public string NewName { get; internal set; }
        [DataMember(Order = 4)] public StoryId StoryId { get; internal set; }
        
        internal NoteRenamed () {}
        public NoteRenamed (NoteId noteId, string oldName, string newName, StoryId storyId)
        {
            NoteId = noteId;
            OldName = oldName;
            NewName = newName;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class TaskRenamed : IEvent
    {
        [DataMember(Order = 1)] public TaskId TaskId { get; internal set; }
        [DataMember(Order = 2)] public string OldText { get; internal set; }
        [DataMember(Order = 3)] public string NewText { get; internal set; }
        [DataMember(Order = 4)] public StoryId StoryId { get; internal set; }
        
        internal TaskRenamed () {}
        public TaskRenamed (TaskId taskId, string oldText, string newText, StoryId storyId)
        {
            TaskId = taskId;
            OldText = oldText;
            NewText = newText;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class SimpleStoryRenamed : IEvent
    {
        [DataMember(Order = 1)] public StoryId StoryId { get; internal set; }
        [DataMember(Order = 2)] public string OldName { get; internal set; }
        [DataMember(Order = 3)] public string NewName { get; internal set; }
        
        internal SimpleStoryRenamed () {}
        public SimpleStoryRenamed (StoryId storyId, string oldName, string newName)
        {
            StoryId = storyId;
            OldName = oldName;
            NewName = newName;
        }
    }
    
    [DataContract] public sealed class AddTask : ICommand
    {
        [DataMember(Order = 1)] public string Text { get; internal set; }
        [DataMember(Order = 2)] public StoryId StoryId { get; internal set; }
        
        internal AddTask () {}
        public AddTask (string text, StoryId storyId)
        {
            Text = text;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class TaskAdded : IEvent
    {
        [DataMember(Order = 1)] public TaskId TaskId { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        [DataMember(Order = 3)] public StoryId StoryId { get; internal set; }
        
        internal TaskAdded () {}
        public TaskAdded (TaskId taskId, string text, StoryId storyId)
        {
            TaskId = taskId;
            Text = text;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class TagItem : ICommand
    {
        [DataMember(Order = 1)] public string Tag { get; internal set; }
        [DataMember(Order = 2)] public Identity ItemId { get; internal set; }
        
        internal TagItem () {}
        public TagItem (string tag, Identity itemId)
        {
            Tag = tag;
            ItemId = itemId;
        }
    }
    
    [DataContract] public sealed class TagCreated : IEvent
    {
        [DataMember(Order = 1)] public string Tag { get; internal set; }
        [DataMember(Order = 2)] public TagId TagId { get; internal set; }
        
        internal TagCreated () {}
        public TagCreated (string tag, TagId tagId)
        {
            Tag = tag;
            TagId = tagId;
        }
    }
    
    [DataContract] public sealed class TagAddedToStory : IEvent
    {
        [DataMember(Order = 1)] public StoryId StoryId { get; internal set; }
        [DataMember(Order = 2)] public TagId TagId { get; internal set; }
        [DataMember(Order = 3)] public string Tag { get; internal set; }
        [DataMember(Order = 4)] public string StoryName { get; internal set; }
        
        internal TagAddedToStory () {}
        public TagAddedToStory (StoryId storyId, TagId tagId, string tag, string storyName)
        {
            StoryId = storyId;
            TagId = tagId;
            Tag = tag;
            StoryName = storyName;
        }
    }
    
    [DataContract] public sealed class ArchiveItem : ICommand
    {
        [DataMember(Order = 1)] public Identity Id { get; internal set; }
        [DataMember(Order = 2)] public StoryId StoryId { get; internal set; }
        
        internal ArchiveItem () {}
        public ArchiveItem (Identity id, StoryId storyId)
        {
            Id = id;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class NoteArchived : IEvent
    {
        [DataMember(Order = 1)] public NoteId NoteId { get; internal set; }
        [DataMember(Order = 2)] public StoryId StoryId { get; internal set; }
        
        internal NoteArchived () {}
        public NoteArchived (NoteId noteId, StoryId storyId)
        {
            NoteId = noteId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class TaskArchived : IEvent
    {
        [DataMember(Order = 1)] public TaskId TaskId { get; internal set; }
        [DataMember(Order = 2)] public StoryId StoryId { get; internal set; }
        
        internal TaskArchived () {}
        public TaskArchived (TaskId taskId, StoryId storyId)
        {
            TaskId = taskId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class AddTaskToStory : ICommand
    {
        [DataMember(Order = 1)] public TaskId TaskId { get; internal set; }
        [DataMember(Order = 2)] public StoryId StoryId { get; internal set; }
        
        internal AddTaskToStory () {}
        public AddTaskToStory (TaskId taskId, StoryId storyId)
        {
            TaskId = taskId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class CompleteTask : ICommand
    {
        [DataMember(Order = 1)] public TaskId TaskId { get; internal set; }
        
        internal CompleteTask () {}
        public CompleteTask (TaskId taskId)
        {
            TaskId = taskId;
        }
    }
    
    [DataContract] public sealed class TaskCompleted : IEvent
    {
        [DataMember(Order = 1)] public TaskId TaskId { get; internal set; }
        [DataMember(Order = 2)] public StoryId StoryId { get; internal set; }
        
        internal TaskCompleted () {}
        public TaskCompleted (TaskId taskId, StoryId storyId)
        {
            TaskId = taskId;
            StoryId = storyId;
        }
    }
    #endregion
}

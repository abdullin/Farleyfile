using System;
using System.Runtime.Serialization;
using System.Collections.Generic;

// this is a DSL to define code contract classes without writing them
// Good for starting a project quickly
// pressing Ctrl+S updates CS version immediately
namespace FarleyFile
{
    #region Generated by Lokad Code DSL
    
    [DataContract] public sealed class PerspectiveCreated : IEvent
    {
        [DataMember(Order = 1)] public Guid StoryId { get; internal set; }
        
        internal PerspectiveCreated () {}
        public PerspectiveCreated (Guid storyId)
        {
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class StartSimpleStory : ICommand
    {
        [DataMember(Order = 1)] public string Name { get; internal set; }
        
        internal StartSimpleStory () {}
        public StartSimpleStory (string name)
        {
            Name = name;
        }
    }
    
    [DataContract] public sealed class SimpleStoryStarted : IEvent
    {
        [DataMember(Order = 1)] public Guid StoryId { get; internal set; }
        [DataMember(Order = 2)] public string Name { get; internal set; }
        
        internal SimpleStoryStarted () {}
        public SimpleStoryStarted (Guid storyId, string name)
        {
            StoryId = storyId;
            Name = name;
        }
    }
    
    [DataContract] public sealed class AddActivity : ICommand
    {
        [DataMember(Order = 1)] public Guid StoryId { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        
        internal AddActivity () {}
        public AddActivity (Guid storyId, string text)
        {
            StoryId = storyId;
            Text = text;
        }
    }
    
    [DataContract] public sealed class ActivityAdded : IEvent
    {
        [DataMember(Order = 1)] public Guid StoryId { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        [DataMember(Order = 3)] public DateTime CreatedUtc { get; internal set; }
        [DataMember(Order = 4)] public Guid ActivityId { get; internal set; }
        
        internal ActivityAdded () {}
        public ActivityAdded (Guid storyId, string text, DateTime createdUtc, Guid activityId)
        {
            StoryId = storyId;
            Text = text;
            CreatedUtc = createdUtc;
            ActivityId = activityId;
        }
    }
    
    [DataContract] public sealed class AddNote : ICommand
    {
        [DataMember(Order = 1)] public string Title { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        [DataMember(Order = 3)] public Guid StoryId { get; internal set; }
        
        internal AddNote () {}
        public AddNote (string title, string text, Guid storyId)
        {
            Title = title;
            Text = text;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class NoteAdded : IEvent
    {
        [DataMember(Order = 1)] public Guid NoteId { get; internal set; }
        [DataMember(Order = 2)] public string Title { get; internal set; }
        [DataMember(Order = 3)] public string Text { get; internal set; }
        
        internal NoteAdded () {}
        public NoteAdded (Guid noteId, string title, string text)
        {
            NoteId = noteId;
            Title = title;
            Text = text;
        }
    }
    
    [DataContract] public sealed class NoteAssignedToStory : IEvent
    {
        [DataMember(Order = 1)] public Guid NoteId { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        [DataMember(Order = 3)] public string Title { get; internal set; }
        [DataMember(Order = 4)] public string Text { get; internal set; }
        
        internal NoteAssignedToStory () {}
        public NoteAssignedToStory (Guid noteId, Guid storyId, string title, string text)
        {
            NoteId = noteId;
            StoryId = storyId;
            Title = title;
            Text = text;
        }
    }
    
    [DataContract] public sealed class NoteRemovedFromStory : IEvent
    {
        [DataMember(Order = 1)] public Guid NoteId { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        
        internal NoteRemovedFromStory () {}
        public NoteRemovedFromStory (Guid noteId, Guid storyId)
        {
            NoteId = noteId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class EditNote : ICommand
    {
        [DataMember(Order = 1)] public Guid NoteId { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        [DataMember(Order = 3)] public string OldText { get; internal set; }
        
        internal EditNote () {}
        public EditNote (Guid noteId, string text, string oldText)
        {
            NoteId = noteId;
            Text = text;
            OldText = oldText;
        }
    }
    
    [DataContract] public sealed class NoteEdited : IEvent
    {
        [DataMember(Order = 1)] public Guid NoteId { get; internal set; }
        [DataMember(Order = 2)] public string NewText { get; internal set; }
        [DataMember(Order = 3)] public string OldText { get; internal set; }
        [DataMember(Order = 4)] public ICollection<Guid> StoryIds { get; internal set; }
        
        internal NoteEdited () {}
        public NoteEdited (Guid noteId, string newText, string oldText, ICollection<Guid> storyIds)
        {
            NoteId = noteId;
            NewText = newText;
            OldText = oldText;
            StoryIds = storyIds;
        }
    }
    
    [DataContract] public sealed class NoteRemoved : IEvent
    {
        [DataMember(Order = 1)] public Guid NoteId { get; internal set; }
        
        internal NoteRemoved () {}
        public NoteRemoved (Guid noteId)
        {
            NoteId = noteId;
        }
    }
    
    [DataContract] public sealed class MergeNotes : ICommand
    {
        [DataMember(Order = 1)] public Guid NoteId { get; internal set; }
        [DataMember(Order = 2)] public Guid Secondary { get; internal set; }
        
        internal MergeNotes () {}
        public MergeNotes (Guid noteId, Guid secondary)
        {
            NoteId = noteId;
            Secondary = secondary;
        }
    }
    
    [DataContract] public sealed class AddTask : ICommand
    {
        [DataMember(Order = 1)] public string Text { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        
        internal AddTask () {}
        public AddTask (string text, Guid storyId)
        {
            Text = text;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class TaskAdded : IEvent
    {
        [DataMember(Order = 1)] public Guid TaskId { get; internal set; }
        [DataMember(Order = 2)] public string Text { get; internal set; }
        
        internal TaskAdded () {}
        public TaskAdded (Guid taskId, string text)
        {
            TaskId = taskId;
            Text = text;
        }
    }
    
    [DataContract] public sealed class TaskAssignedToStory : IEvent
    {
        [DataMember(Order = 1)] public Guid TaskId { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        [DataMember(Order = 3)] public string Text { get; internal set; }
        [DataMember(Order = 4)] public bool Completed { get; internal set; }
        
        internal TaskAssignedToStory () {}
        public TaskAssignedToStory (Guid taskId, Guid storyId, string text, bool completed)
        {
            TaskId = taskId;
            StoryId = storyId;
            Text = text;
            Completed = completed;
        }
    }
    
    [DataContract] public sealed class TaskRemovedFromStory : IEvent
    {
        [DataMember(Order = 1)] public Guid TaskId { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        
        internal TaskRemovedFromStory () {}
        public TaskRemovedFromStory (Guid taskId, Guid storyId)
        {
            TaskId = taskId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class AddToStory : ICommand
    {
        [DataMember(Order = 1)] public Guid ItemId { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        
        internal AddToStory () {}
        public AddToStory (Guid itemId, Guid storyId)
        {
            ItemId = itemId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class RemoveFromStory : ICommand
    {
        [DataMember(Order = 1)] public Guid ItemId { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        
        internal RemoveFromStory () {}
        public RemoveFromStory (Guid itemId, Guid storyId)
        {
            ItemId = itemId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class AddTaskToStory : ICommand
    {
        [DataMember(Order = 1)] public Guid TaskId { get; internal set; }
        [DataMember(Order = 2)] public Guid StoryId { get; internal set; }
        
        internal AddTaskToStory () {}
        public AddTaskToStory (Guid taskId, Guid storyId)
        {
            TaskId = taskId;
            StoryId = storyId;
        }
    }
    
    [DataContract] public sealed class CompleteTask : ICommand
    {
        [DataMember(Order = 1)] public Guid TaskId { get; internal set; }
        
        internal CompleteTask () {}
        public CompleteTask (Guid taskId)
        {
            TaskId = taskId;
        }
    }
    
    [DataContract] public sealed class TaskCompleted : IEvent
    {
        [DataMember(Order = 1)] public Guid TaskId { get; internal set; }
        [DataMember(Order = 2)] public ICollection<Guid> StoryIds { get; internal set; }
        
        internal TaskCompleted () {}
        public TaskCompleted (Guid taskId, ICollection<Guid> storyIds)
        {
            TaskId = taskId;
            StoryIds = storyIds;
        }
    }
    #endregion
}
